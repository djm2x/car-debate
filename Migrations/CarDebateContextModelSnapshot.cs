// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using mvc;

namespace mvc.Migrations
{
    [DbContext(typeof(CarDebateContext))]
    partial class CarDebateContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("mvc.Advert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnneModel");

                    b.Property<DateTime>("DateAdvert")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2019, 4, 17, 1, 24, 56, 479, DateTimeKind.Local).AddTicks(7057));

                    b.Property<DateTime>("DateSell")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(2019, 4, 17, 1, 24, 56, 481, DateTimeKind.Local).AddTicks(5331));

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("IdModel");

                    b.Property<int>("IdUser");

                    b.Property<double>("Km");

                    b.Property<double>("Prix");

                    b.Property<bool>("state")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("IdModel");

                    b.HasIndex("IdUser");

                    b.ToTable("Adverts");
                });

            modelBuilder.Entity("mvc.AdvertModelImg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdAdvert");

                    b.Property<string>("ImageUrl")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("IdAdvert");

                    b.ToTable("AdvertModelImgs");
                });

            modelBuilder.Entity("mvc.Carburant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Carburants");
                });

            modelBuilder.Entity("mvc.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("mvc.Marque", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdCountry");

                    b.Property<string>("ImageUrl")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("IdCountry");

                    b.ToTable("Marques");
                });

            modelBuilder.Entity("mvc.Model", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Annee")
                        .HasMaxLength(4);

                    b.Property<int>("Autonomie");

                    b.Property<int>("BoiteVitesse");

                    b.Property<int>("Cc");

                    b.Property<float>("ConsAutoroute");

                    b.Property<float>("ConsRoute");

                    b.Property<float>("ConsVille");

                    b.Property<float>("FreinageUrgence");

                    b.Property<int>("IdCarburant");

                    b.Property<int>("IdMarque");

                    b.Property<int>("IdTransmission");

                    b.Property<int>("IdTypeVoiture");

                    b.Property<float>("Poid");

                    b.Property<float>("Prix");

                    b.Property<int>("Puissance");

                    b.Property<float>("Reservoir");

                    b.Property<float>("VitesseMax");

                    b.HasKey("Id");

                    b.HasIndex("IdCarburant");

                    b.HasIndex("IdMarque");

                    b.HasIndex("IdTransmission");

                    b.HasIndex("IdTypeVoiture");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("mvc.ModelImg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IdModel")
                        .IsRequired();

                    b.Property<string>("ImageUrl")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("IdModel");

                    b.ToTable("ModelImgs");
                });

            modelBuilder.Entity("mvc.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("mvc.Transmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Transmissions");
                });

            modelBuilder.Entity("mvc.TypeUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("TypeUsers");
                });

            modelBuilder.Entity("mvc.TypeVoiture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("TypeVoitures");
                });

            modelBuilder.Entity("mvc.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FullName")
                        .IsRequired();

                    b.Property<int>("IdTypeUser");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("Tel")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("IdTypeUser");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("mvc.UserRole", b =>
                {
                    b.Property<int>("IdRole");

                    b.Property<int>("IdUser");

                    b.HasKey("IdRole", "IdUser");

                    b.HasIndex("IdUser");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("mvc.Advert", b =>
                {
                    b.HasOne("mvc.Model", "Model")
                        .WithMany("Adverts")
                        .HasForeignKey("IdModel");

                    b.HasOne("mvc.User", "User")
                        .WithMany("Adverts")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("mvc.AdvertModelImg", b =>
                {
                    b.HasOne("mvc.Advert", "Advert")
                        .WithMany("AdvertModelImgs")
                        .HasForeignKey("IdAdvert")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("mvc.Marque", b =>
                {
                    b.HasOne("mvc.Country", "Country")
                        .WithMany("Marques")
                        .HasForeignKey("IdCountry")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("mvc.Model", b =>
                {
                    b.HasOne("mvc.Carburant", "Carburant")
                        .WithMany("Models")
                        .HasForeignKey("IdCarburant")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("mvc.Marque", "Marque")
                        .WithMany("Models")
                        .HasForeignKey("IdMarque")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("mvc.Transmission", "Transmission")
                        .WithMany("Models")
                        .HasForeignKey("IdTransmission")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("mvc.TypeVoiture", "TypeVoiture")
                        .WithMany("Models")
                        .HasForeignKey("IdTypeVoiture")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("mvc.ModelImg", b =>
                {
                    b.HasOne("mvc.Model", "Model")
                        .WithMany("ModelImgs")
                        .HasForeignKey("IdModel")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("mvc.User", b =>
                {
                    b.HasOne("mvc.TypeUser", "TypeUser")
                        .WithMany("Users")
                        .HasForeignKey("IdTypeUser")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("mvc.UserRole", b =>
                {
                    b.HasOne("mvc.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("mvc.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
